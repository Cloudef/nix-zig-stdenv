#!/bin/bash
# shellcheck disable=SC2059,SC2064

set -euo pipefail
hash nix nix-build jq

scriptdir="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

NUM_JOBS="${NUM_JOBS:-$(nproc)}"
testdir="${TESTDIR:-"$scriptdir/result"}"
rm -rf "$testdir"

c='\033[0;0m'
r='\033[0;31m'
g='\033[0;32m'
w='\033[0;37m'

is_dry_run=0

args=()
nix_build_args=(--no-out-link)
while [[ $# -gt 0 ]]; do
  case "$1" in
    --dry-run)
       nix_build_args+=("$1")
       is_dry_run=1
       shift
       ;;
    -o|--out-link)
      nix_build_args+=("$1" "$2")
      shift; shift
      ;;
    *)
      args+=("$1")
      shift
      ;;
  esac
done
set -- "${args[@]}"

njobs() {
   jobs -rp | wc -w
}

waitforjobs() {
   while [[ "$(njobs)" -gt "$1" ]]; do sleep 1; done
}

eval-and-report() {
   job() {
      local name="$1" zig_version="$2" target="$3"
      local desc="$zig_version-$target-$name"
      local path res
      path="$(mktemp)"
      res="$(mktemp)"
      shift 3
      if timeout "${TEST_TIMEOUT:-15m}" "$@" 1>"$res" 2>"$path"; then
         local out exe fmt
         info() {
            if [[ $is_dry_run == 0 ]]; then
               out="$(<"$res")"
               exe="$(find "$out/" -type f \( -perm -u=x -o -perm -g=x -o -perm -o=x \) -print -quit)"
               fmt="$(file "$exe" | awk -F':' '{print $2}')"
               printf -- "      ${w}%s${c}" "$fmt"
            else
               sed "s/^/> /" "$path"
            fi
         }
         printf -- "[$g OK $c] ${w}%s${c}\n%s\n" "$desc" "$(info)"
         rm -f "$path" "$res"
      else
         [[ $? == 124 ]] && reason=SLOW || reason=FAIL
         printf -- "[${r}%s${c}] ${w}%s${c}\n" "$reason" "$desc"
         mkdir -p "$testdir"
         rm -f "$testdir/$desc" "$res"
         mv "$path" "$testdir/$desc"
      fi
   }
   waitforjobs "$NUM_JOBS"
   job "$@" &
}

dump() {
   printf -- "${w}%s:${c}\n" "$1"
   sed "s/^/> /" "$testdir/$1"
}

dump-failed() {
   [[ -d "$testdir" ]] || return 0
   printf -- "${r}\n"
   printf -- '------------\n'
   printf -- '- FAILURES -\n'
   printf -- '------------\n'
   printf -- "${c}\n"
   local first=1
   for f in "$testdir"/*; do
      [[ $first == 0 ]] && printf -- '\n'; first=1
      dump "$(basename "$f")"
   done
   return 1
}

list-versions() {
   nix eval --json -f "$scriptdir/default.nix" list-versions | jq -r '.[]'
}

install-version() {
   eval-and-report "zig" "$1" "native" nix-build "${nix_build_args[@]}" "$scriptdir/default.nix" -A install-version --argstr version "$1"
}

list-targets() {
   nix eval --json -f "$scriptdir/default.nix" --arg allow-broken false zigVersions."\"$1\"".targets --apply builtins.attrNames | jq -r '.[]'
}

build-package() {
   eval-and-report "$3" "$1" "$2" nix-build "${nix_build_args[@]}" "$scriptdir/default.nix" -A zigVersions."\"$1\".targets.\"$2\".pkgs.\"$3\""
}

build-package-for-all-targets() {
   while read -r target; do
      build-package "$1" "$target" "$2"
   done < <(list-targets "$1")
}

build-package-for-all-targets-and-versions() {
   while read -r ver; do
      build-package-for-all-targets "$ver" "$1"
   done < <(list-versions)
}

all_for_target() {
   local ver="$1"
   local target="$2"
   p() { build-package "$ver" "$target" "$1"; }
   p super-simple
   p iniparser
}

all_for_version() {
   while read -r target; do
      all_for_target "$1" "$target"
   done < <(list-targets "$1")
}

all() {
   while read -r ver; do
      install-version "$ver"
      while read -r target; do
         all_for_target "$ver" "$target"
      done < <(list-targets "$ver")
   done < <(list-versions)
}

trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT
"$@"
waitforjobs 0
trap - SIGINT SIGTERM EXIT
dump-failed
